/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
/**
 * UploadsBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-24T21:35:10.561608+02:00[Europe/Rome]")
public class UploadsBody {
  @SerializedName("file")
  private File file = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("trainer")
  private String trainer = null;

  @SerializedName("commute")
  private String commute = null;

  /**
   * The format of the uploaded file.
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    FIT("fit"),
    FIT_GZ("fit.gz"),
    TCX("tcx"),
    TCX_GZ("tcx.gz"),
    GPX("gpx"),
    GPX_GZ("gpx.gz");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DataTypeEnum fromValue(String text) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DataTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("data_type")
  private DataTypeEnum dataType = null;

  @SerializedName("external_id")
  private String externalId = null;

  public UploadsBody file(File file) {
    this.file = file;
    return this;
  }

   /**
   * The uploaded file.
   * @return file
  **/
  @Schema(description = "The uploaded file.")
  public File getFile() {
    return file;
  }

  public void setFile(File file) {
    this.file = file;
  }

  public UploadsBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The desired name of the resulting activity.
   * @return name
  **/
  @Schema(description = "The desired name of the resulting activity.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UploadsBody description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The desired description of the resulting activity.
   * @return description
  **/
  @Schema(description = "The desired description of the resulting activity.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public UploadsBody trainer(String trainer) {
    this.trainer = trainer;
    return this;
  }

   /**
   * Whether the resulting activity should be marked as having been performed on a trainer.
   * @return trainer
  **/
  @Schema(description = "Whether the resulting activity should be marked as having been performed on a trainer.")
  public String getTrainer() {
    return trainer;
  }

  public void setTrainer(String trainer) {
    this.trainer = trainer;
  }

  public UploadsBody commute(String commute) {
    this.commute = commute;
    return this;
  }

   /**
   * Whether the resulting activity should be tagged as a commute.
   * @return commute
  **/
  @Schema(description = "Whether the resulting activity should be tagged as a commute.")
  public String getCommute() {
    return commute;
  }

  public void setCommute(String commute) {
    this.commute = commute;
  }

  public UploadsBody dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * The format of the uploaded file.
   * @return dataType
  **/
  @Schema(description = "The format of the uploaded file.")
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public UploadsBody externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * The desired external identifier of the resulting activity.
   * @return externalId
  **/
  @Schema(description = "The desired external identifier of the resulting activity.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadsBody uploadsBody = (UploadsBody) o;
    return Objects.equals(this.file, uploadsBody.file) &&
        Objects.equals(this.name, uploadsBody.name) &&
        Objects.equals(this.description, uploadsBody.description) &&
        Objects.equals(this.trainer, uploadsBody.trainer) &&
        Objects.equals(this.commute, uploadsBody.commute) &&
        Objects.equals(this.dataType, uploadsBody.dataType) &&
        Objects.equals(this.externalId, uploadsBody.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Objects.hashCode(file), name, description, trainer, commute, dataType, externalId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadsBody {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    trainer: ").append(toIndentedString(trainer)).append("\n");
    sb.append("    commute: ").append(toIndentedString(commute)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
