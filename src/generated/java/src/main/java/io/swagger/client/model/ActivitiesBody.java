/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * ActivitiesBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-24T21:35:10.561608+02:00[Europe/Rome]")
public class ActivitiesBody {
  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("start_date_local")
  private OffsetDateTime startDateLocal = null;

  @SerializedName("elapsed_time")
  private Integer elapsedTime = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("distance")
  private Float distance = null;

  @SerializedName("trainer")
  private Integer trainer = null;

  @SerializedName("commute")
  private Integer commute = null;

  public ActivitiesBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the activity.
   * @return name
  **/
  @Schema(required = true, description = "The name of the activity.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ActivitiesBody type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of activity. For example - Run, Ride etc.
   * @return type
  **/
  @Schema(required = true, description = "Type of activity. For example - Run, Ride etc.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ActivitiesBody startDateLocal(OffsetDateTime startDateLocal) {
    this.startDateLocal = startDateLocal;
    return this;
  }

   /**
   * ISO 8601 formatted date time.
   * @return startDateLocal
  **/
  @Schema(required = true, description = "ISO 8601 formatted date time.")
  public OffsetDateTime getStartDateLocal() {
    return startDateLocal;
  }

  public void setStartDateLocal(OffsetDateTime startDateLocal) {
    this.startDateLocal = startDateLocal;
  }

  public ActivitiesBody elapsedTime(Integer elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

   /**
   * In seconds.
   * @return elapsedTime
  **/
  @Schema(required = true, description = "In seconds.")
  public Integer getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(Integer elapsedTime) {
    this.elapsedTime = elapsedTime;
  }

  public ActivitiesBody description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the activity.
   * @return description
  **/
  @Schema(description = "Description of the activity.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ActivitiesBody distance(Float distance) {
    this.distance = distance;
    return this;
  }

   /**
   * In meters.
   * @return distance
  **/
  @Schema(description = "In meters.")
  public Float getDistance() {
    return distance;
  }

  public void setDistance(Float distance) {
    this.distance = distance;
  }

  public ActivitiesBody trainer(Integer trainer) {
    this.trainer = trainer;
    return this;
  }

   /**
   * Set to 1 to mark as a trainer activity.
   * @return trainer
  **/
  @Schema(description = "Set to 1 to mark as a trainer activity.")
  public Integer getTrainer() {
    return trainer;
  }

  public void setTrainer(Integer trainer) {
    this.trainer = trainer;
  }

  public ActivitiesBody commute(Integer commute) {
    this.commute = commute;
    return this;
  }

   /**
   * Set to 1 to mark as commute.
   * @return commute
  **/
  @Schema(description = "Set to 1 to mark as commute.")
  public Integer getCommute() {
    return commute;
  }

  public void setCommute(Integer commute) {
    this.commute = commute;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivitiesBody activitiesBody = (ActivitiesBody) o;
    return Objects.equals(this.name, activitiesBody.name) &&
        Objects.equals(this.type, activitiesBody.type) &&
        Objects.equals(this.startDateLocal, activitiesBody.startDateLocal) &&
        Objects.equals(this.elapsedTime, activitiesBody.elapsedTime) &&
        Objects.equals(this.description, activitiesBody.description) &&
        Objects.equals(this.distance, activitiesBody.distance) &&
        Objects.equals(this.trainer, activitiesBody.trainer) &&
        Objects.equals(this.commute, activitiesBody.commute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, startDateLocal, elapsedTime, description, distance, trainer, commute);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivitiesBody {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startDateLocal: ").append(toIndentedString(startDateLocal)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    trainer: ").append(toIndentedString(trainer)).append("\n");
    sb.append("    commute: ").append(toIndentedString(commute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
