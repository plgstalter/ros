/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(BaseStream.class, new TypeSelector<BaseStream>() {
            @Override
            public Class<? extends BaseStream> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends BaseStream>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AltitudeStream".toUpperCase(), AltitudeStream.class);
                    classByDiscriminatorValue.put("CadenceStream".toUpperCase(), CadenceStream.class);
                    classByDiscriminatorValue.put("DistanceStream".toUpperCase(), DistanceStream.class);
                    classByDiscriminatorValue.put("HeartrateStream".toUpperCase(), HeartrateStream.class);
                    classByDiscriminatorValue.put("LatLngStream".toUpperCase(), LatLngStream.class);
                    classByDiscriminatorValue.put("MovingStream".toUpperCase(), MovingStream.class);
                    classByDiscriminatorValue.put("PowerStream".toUpperCase(), PowerStream.class);
                    classByDiscriminatorValue.put("SmoothGradeStream".toUpperCase(), SmoothGradeStream.class);
                    classByDiscriminatorValue.put("SmoothVelocityStream".toUpperCase(), SmoothVelocityStream.class);
                    classByDiscriminatorValue.put("TemperatureStream".toUpperCase(), TemperatureStream.class);
                    classByDiscriminatorValue.put("TimeStream".toUpperCase(), TimeStream.class);
                    classByDiscriminatorValue.put("BaseStream".toUpperCase(), BaseStream.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(BaseStream.class, new PostProcessor<BaseStream>() {
              @Override
              public void postDeserialize(BaseStream result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, BaseStream src, Gson gson) {
                  Map<Class<? extends BaseStream>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AltitudeStream.class, "AltitudeStream");
                      discriminatorValueByClass.put(CadenceStream.class, "CadenceStream");
                      discriminatorValueByClass.put(DistanceStream.class, "DistanceStream");
                      discriminatorValueByClass.put(HeartrateStream.class, "HeartrateStream");
                      discriminatorValueByClass.put(LatLngStream.class, "LatLngStream");
                      discriminatorValueByClass.put(MovingStream.class, "MovingStream");
                      discriminatorValueByClass.put(PowerStream.class, "PowerStream");
                      discriminatorValueByClass.put(SmoothGradeStream.class, "SmoothGradeStream");
                      discriminatorValueByClass.put(SmoothVelocityStream.class, "SmoothVelocityStream");
                      discriminatorValueByClass.put(TemperatureStream.class, "TemperatureStream");
                      discriminatorValueByClass.put(TimeStream.class, "TimeStream");
                      discriminatorValueByClass.put(BaseStream.class, "BaseStream");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummaryActivity.class, new TypeSelector<SummaryActivity>() {
            @Override
            public Class<? extends SummaryActivity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummaryActivity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedActivity".toUpperCase(), DetailedActivity.class);
                    classByDiscriminatorValue.put("SummaryActivity".toUpperCase(), SummaryActivity.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummaryActivity.class, new PostProcessor<SummaryActivity>() {
              @Override
              public void postDeserialize(SummaryActivity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummaryActivity src, Gson gson) {
                  Map<Class<? extends SummaryActivity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedActivity.class, "DetailedActivity");
                      discriminatorValueByClass.put(SummaryActivity.class, "SummaryActivity");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummaryAthlete.class, new TypeSelector<SummaryAthlete>() {
            @Override
            public Class<? extends SummaryAthlete> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummaryAthlete>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedAthlete".toUpperCase(), DetailedAthlete.class);
                    classByDiscriminatorValue.put("SummaryAthlete".toUpperCase(), SummaryAthlete.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummaryAthlete.class, new PostProcessor<SummaryAthlete>() {
              @Override
              public void postDeserialize(SummaryAthlete result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummaryAthlete src, Gson gson) {
                  Map<Class<? extends SummaryAthlete>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedAthlete.class, "DetailedAthlete");
                      discriminatorValueByClass.put(SummaryAthlete.class, "SummaryAthlete");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummaryClub.class, new TypeSelector<SummaryClub>() {
            @Override
            public Class<? extends SummaryClub> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummaryClub>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedClub".toUpperCase(), DetailedClub.class);
                    classByDiscriminatorValue.put("SummaryClub".toUpperCase(), SummaryClub.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummaryClub.class, new PostProcessor<SummaryClub>() {
              @Override
              public void postDeserialize(SummaryClub result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummaryClub src, Gson gson) {
                  Map<Class<? extends SummaryClub>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedClub.class, "DetailedClub");
                      discriminatorValueByClass.put(SummaryClub.class, "SummaryClub");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummaryGear.class, new TypeSelector<SummaryGear>() {
            @Override
            public Class<? extends SummaryGear> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummaryGear>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedGear".toUpperCase(), DetailedGear.class);
                    classByDiscriminatorValue.put("SummaryGear".toUpperCase(), SummaryGear.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummaryGear.class, new PostProcessor<SummaryGear>() {
              @Override
              public void postDeserialize(SummaryGear result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummaryGear src, Gson gson) {
                  Map<Class<? extends SummaryGear>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedGear.class, "DetailedGear");
                      discriminatorValueByClass.put(SummaryGear.class, "SummaryGear");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummarySegment.class, new TypeSelector<SummarySegment>() {
            @Override
            public Class<? extends SummarySegment> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummarySegment>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedSegment".toUpperCase(), DetailedSegment.class);
                    classByDiscriminatorValue.put("SummarySegment".toUpperCase(), SummarySegment.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummarySegment.class, new PostProcessor<SummarySegment>() {
              @Override
              public void postDeserialize(SummarySegment result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummarySegment src, Gson gson) {
                  Map<Class<? extends SummarySegment>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedSegment.class, "DetailedSegment");
                      discriminatorValueByClass.put(SummarySegment.class, "SummarySegment");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SummarySegmentEffort.class, new TypeSelector<SummarySegmentEffort>() {
            @Override
            public Class<? extends SummarySegmentEffort> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SummarySegmentEffort>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DetailedSegmentEffort".toUpperCase(), DetailedSegmentEffort.class);
                    classByDiscriminatorValue.put("SummarySegmentEffort".toUpperCase(), SummarySegmentEffort.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SummarySegmentEffort.class, new PostProcessor<SummarySegmentEffort>() {
              @Override
              public void postDeserialize(SummarySegmentEffort result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SummarySegmentEffort src, Gson gson) {
                  Map<Class<? extends SummarySegmentEffort>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DetailedSegmentEffort.class, "DetailedSegmentEffort");
                      discriminatorValueByClass.put(SummarySegmentEffort.class, "SummarySegmentEffort");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MetaActivity.class, new TypeSelector<MetaActivity>() {
            @Override
            public Class<? extends MetaActivity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MetaActivity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SummaryActivity".toUpperCase(), SummaryActivity.class);
                    classByDiscriminatorValue.put("MetaActivity".toUpperCase(), MetaActivity.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(MetaActivity.class, new PostProcessor<MetaActivity>() {
              @Override
              public void postDeserialize(MetaActivity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MetaActivity src, Gson gson) {
                  Map<Class<? extends MetaActivity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SummaryActivity.class, "SummaryActivity");
                      discriminatorValueByClass.put(MetaActivity.class, "MetaActivity");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MetaAthlete.class, new TypeSelector<MetaAthlete>() {
            @Override
            public Class<? extends MetaAthlete> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MetaAthlete>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SummaryAthlete".toUpperCase(), SummaryAthlete.class);
                    classByDiscriminatorValue.put("MetaAthlete".toUpperCase(), MetaAthlete.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(MetaAthlete.class, new PostProcessor<MetaAthlete>() {
              @Override
              public void postDeserialize(MetaAthlete result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MetaAthlete src, Gson gson) {
                  Map<Class<? extends MetaAthlete>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SummaryAthlete.class, "SummaryAthlete");
                      discriminatorValueByClass.put(MetaAthlete.class, "MetaAthlete");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MetaClub.class, new TypeSelector<MetaClub>() {
            @Override
            public Class<? extends MetaClub> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MetaClub>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SummaryClub".toUpperCase(), SummaryClub.class);
                    classByDiscriminatorValue.put("MetaClub".toUpperCase(), MetaClub.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(MetaClub.class, new PostProcessor<MetaClub>() {
              @Override
              public void postDeserialize(MetaClub result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MetaClub src, Gson gson) {
                  Map<Class<? extends MetaClub>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SummaryClub.class, "SummaryClub");
                      discriminatorValueByClass.put(MetaClub.class, "MetaClub");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ZoneRange.class, new TypeSelector<ZoneRange>() {
            @Override
            public Class<? extends ZoneRange> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ZoneRange>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TimedZoneRange".toUpperCase(), TimedZoneRange.class);
                    classByDiscriminatorValue.put("ZoneRange".toUpperCase(), ZoneRange.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ZoneRange.class, new PostProcessor<ZoneRange>() {
              @Override
              public void postDeserialize(ZoneRange result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ZoneRange src, Gson gson) {
                  Map<Class<? extends ZoneRange>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TimedZoneRange.class, "TimedZoneRange");
                      discriminatorValueByClass.put(ZoneRange.class, "ZoneRange");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
